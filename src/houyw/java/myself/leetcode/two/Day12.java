package houyw.java.myself.leetcode.two;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * @Author: DELL
 * @Date: 2022/7/11 20:44
 * @Description:
 */
public class Day12 {

    public static void main(String[] args) {
        Day12 day = new Day12();
        int[] coins = {186, 419, 83, 408};//6249
        //int[] coins = {1, 2, 5};
        System.out.println(day.coinChange(coins, 6249));
    }

    /**
     * 给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。
     * 计算并返回可以凑成总金额所需的 最少的硬币个数 。
     * 如果没有任何一种硬币组合能组成总金额，返回?-1 。
     * 你可以认为每种硬币的数量是无限的。
     * 示例?1：
     * 输入：coins = [1, 2, 5], amount = 11
     * 输出：3
     * 解释：11 = 5 + 5 + 1
     * 示例 2：
     * 输入：coins = [2], amount = 3
     * 输出：-1
     * 示例 3：
     * 输入：coins = [1], amount = 0
     * 输出：0
     * 提示：
     * 1 <= coins.length <= 12
     * 1 <= coins[i] <= 231 - 1
     * 0 <= amount <= 104
     */

    public int coinChange(int[] coins, int amount) {
        if (amount == 0) {
            return 0;
        }
        int[] fn = new int[amount + 1];
        fn[0] = 0;
        for (int i = 1; i <= amount; i++) {
            fn[i] = -1;
            for (int coin : coins) {
                if (i < coin) {
                    continue;
                }
                if (fn[i - coin] == -1) {
                    continue;
                }
                if (fn[i] == -1) {
                    fn[i] = fn[i - coin] + 1;
                } else {
                    if (fn[i] > fn[i - coin] + 1) {
                        fn[i] = fn[i - coin] + 1;
                    }
                }
            }
        }
        return fn[amount];
    }
}
